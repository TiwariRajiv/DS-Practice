//Mark edges first
class Solution {

    private static final int[] dRow = {-1, 1, 0, 0};
    private static final int[] dCol = {0, 0, -1, 1};

    private void dfs(int i, int j, char[][] board, boolean[][] visited) {
        visited[i][j] = true;
        for (int k=0; k<4; k++) {
            int row = i + dRow[k];
            int col = j + dCol[k];
            if (row>=0 && row<board.length && col>=0 && col<board[0].length && board[row][col]=='O' && !visited[row][col]) {
                dfs(row, col, board, visited);
            }
        }
    }

    public void solve(char[][] board) {
        boolean[][] visited = new boolean[board.length][board[0].length];
        for (int i=0; i<board.length; i++) {
            Arrays.fill(visited[i], false);
        }
        for (int i=0; i<board[0].length; i++) {
            if (!visited[0][i] && board[0][i] == 'O') {
                dfs(0, i, board, visited);
            }
        }
        for (int i=0; i<board[0].length; i++) {
            if (!visited[board.length-1][i] && board[board.length-1][i] == 'O') {
                dfs(board.length-1, i, board, visited);
            }
        }
        for (int i=0; i<board.length; i++) {
            if (!visited[i][0] && board[i][0] == 'O') {
                dfs(i, 0, board, visited);
            }
        }
        for (int i=0; i<board.length; i++) {
            if (!visited[i][board[0].length-1] && board[i][board[0].length-1] == 'O') {
                dfs(i, board[0].length-1, board, visited);
            }
        }

        for (int i=1; i<board.length-1; i++) {
            for (int j=1; j<board[0].length-1; j++) {
                if (board[i][j] == 'O' && !visited[i][j]) {
                    board[i][j] = 'X';
                }
            }
        }
    }
}
