//Like surrounded-regions
class Solution {

    private static final int[] dRow = {-1, 1, 0, 0};
    private static final int[] dCol = {0, 0, -1, 1};

    private void dfs(int i, int j, int m, int n, int[][] grid, boolean[][] visited) {
        visited[i][j] = true;
        for (int k=0; k<4; k++) {
            int r = i + dRow[k];
            int c = j + dCol[k];
            if (r>=0 && r<m && c>=0 && c<n && grid[r][c]==1 && !visited[r][c]) {
                dfs(r, c, m, n, grid, visited);
            }
        }
    }

    public int numEnclaves(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];

        for (int i=0; i<n; i++) {
            if (!visited[0][i] && grid[0][i]==1) {
                dfs(0, i, m, n, grid, visited);
            }
            if (!visited[m-1][i] && grid[m-1][i]==1) {
                dfs(m-1, i, m, n, grid, visited);
            }
        }
        for (int i=0; i<m; i++) {
            if (!visited[i][0] && grid[i][0]==1) {
                dfs(i, 0, m, n, grid, visited);
            }
            if (!visited[i][n-1] && grid[i][n-1]==1) {
                dfs(i, n-1, m, n, grid, visited);
            }
        }
        
        int count=0;
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                if (!visited[i][j] && grid[i][j]==1) {
                    count++;
                }
            }
        }
        return count;
    }
}
