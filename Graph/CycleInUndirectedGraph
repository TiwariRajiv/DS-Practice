class Solution {
    
    private boolean dfs(int i, ArrayList<ArrayList<Integer>> adj, int parent, boolean[] visited) {
        visited[i] = true;
        for (int node : adj.get(i)) {
            if (!visited[node]) {
                if (dfs(node, adj, i, visited)) {
                    return true;
                }
            } else if (node != parent) {
                return true;
            }
        }
        return false;
    }
    
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        for (int i=0; i<V; i++) {
            if (!visited[i]) {
                if (dfs(0, adj, -1, visited)) {
                    return true;
                }
            }
        }
        return false;
    }
}
