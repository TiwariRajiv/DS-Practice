//BFS
class Solution {

    private class Pair<K, V> {
        private K left;
        private V right;

        Pair(K left, V right) {
            this.left = left;
            this.right = right;
        }

        public K getKey() {
            return this.left;
        }

        public V getValue() {
            return this.right;
        }
    }

    private void rot(int i, int j, int[][] grid, Queue<Pair<Integer, Integer>> queue) {
        if (i<0 || j<0 || i>=grid.length || j>=grid[0].length || grid[i][j] != 1) {
            return;
        }
        grid[i][j] = 2;
        queue.add(new Pair<Integer, Integer>(i, j));
    }

    public int orangesRotting(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int fresh_oranges = 0;

        Queue<Pair<Integer, Integer>> queue = new LinkedList<>();
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                if (grid[i][j] == 2) {
                    queue.add(new Pair<Integer, Integer>(i, j));
                } else if (grid[i][j] == 1) {
                    fresh_oranges++;
                }
            }
        }

        if (fresh_oranges == 0) return 0;

        int count = -1;
        while (!queue.isEmpty()) {
            count++;
            int size = queue.size();
            for (int i=0; i<size; i++) {
                Pair<Integer, Integer> pair = queue.remove();
                int row = pair.getKey();
                int col = pair.getValue();
                rot(row+1, col, grid, queue);
                rot(row-1, col, grid, queue);
                rot(row, col+1, grid, queue);
                rot(row, col-1, grid, queue);
            }
        }

        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                if (grid[i][j] == 1) {
                    return -1;
                }
            }
        }

        return count == -1 ? 0 : count;
    }
}
