class Solution {
    
    private static final int[] dx = {-1, 0, 1, 0};
    private static final int[] dy = {0, -1, 0, 1};
    
    private void dfs(int i, int j, int m, int n, int[][] grid, boolean[][] visited) {
        visited[i][j] = true;
        for (int k=0; k<4; k++) {
            int x = i + dx[k];
            int y = j + dy[k];
            if (x>=0 && y>=0 && x<m && y<n && !visited[x][y] && grid[x][y] == 1) {
                dfs(x, y, m, n, grid, visited);
            }
        }
    }

    int numberOfEnclaves(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i=0; i<m; i++) {
            if (grid[i][0] == 1 && !visited[i][0]) {
                dfs(i, 0, m, n, grid, visited);
            }
            if (grid[i][n-1] == 1 && !visited[i][n-1]) {
                dfs(i, n-1, m, n, grid, visited);
            }
        }
        
        for (int i=0; i<n; i++) {
            if (grid[0][i] == 1 && !visited[0][i]) {
                dfs(0, i, m, n, grid, visited);
            }
            if (grid[m-1][i] == 1 && !visited[m-1][i]) {
                dfs(m-1, i, m, n, grid, visited);
            }
        }
        
        int count=0;
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                if (grid[i][j] == 1 && !visited[i][j]) {
                    count++;
                }
            }
        }
        return count;
    }
}
