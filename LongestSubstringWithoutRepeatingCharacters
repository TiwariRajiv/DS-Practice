//Leetcode : https://leetcode.com/problems/longest-substring-without-repeating-characters/

class Solution {
    
    /**
    * Start with 0 and add in map.
    * Now for each element if it does not exist in map ( unique element ) OR
    * it exist in map but its index is lesser than stat ( unique element for the window )
    * Put/update this element in map.
    *
    * Else ( if element exist in window that means the element has repeated )
    * calculate length of the current substring : i - start
    * assign to max if larger than max
    * update start => duplicate element's last index ( map.get(s.charAt(i)) + 1 )
    * Put/Update this element in map.
    *
    * Finally check for the last window length and update max if required.
    */
    public int lengthOfLongestSubstring(String s) {
        Map<Character, Integer> map = new HashMap<>(); 
        if (s.length() <= 1) {
            return s.length();
        }
        int max = 1;
        int start = 0;
        map.put(s.charAt(0), 0);
        for (int i=1; i<s.length(); i++) {
            if (!map.containsKey(s.charAt(i)) || (map.containsKey(s.charAt(i)) && map.get(s.charAt(i)) < start)) {
                map.put(s.charAt(i), i);
            } else {
                int length = i - start;
                max = max < length ? length : max;
                start = map.get(s.charAt(i)) + 1;
                map.put(s.charAt(i), i);
            }
        }
        int length = s.length() - start;
        max = max < length ? length : max;
        return max;
    }
}
